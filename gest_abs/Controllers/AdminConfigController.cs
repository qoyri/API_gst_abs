using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Microsoft.EntityFrameworkCore;
using gest_abs.Services;
using gest_abs.DTO;
using gest_abs.Models;
using System.Security.Claims;

namespace gest_abs.Controllers
{
    [Route("api/admin/config")]
    [ApiController]
    [Authorize(Roles = "admin")] // ðŸ”¹ Seuls les administrateurs peuvent accÃ©der Ã  ces endpoints
    public class AdminConfigController : ControllerBase
    {
        private readonly GestionAbsencesContext _context;
        private readonly AdminConfigService _configService;

        public AdminConfigController(GestionAbsencesContext context, AdminConfigService configService)
        {
            _context = context;
            _configService = configService;
        }

        // ðŸ”¹ GET /api/admin/config/alerts â†’ RÃ©cupÃ©rer la configuration des alertes
        [HttpGet("alerts")]
        public async Task<IActionResult> GetAlertConfig()
        {
            try
            {
                var config = await _configService.GetAlertConfig();
                return Ok(config);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new ErrorResponseDTO { Message = $"Erreur interne du serveur: {ex.Message}" });
            }
        }

        // ðŸ”¹ PUT /api/admin/config/alerts â†’ Mettre Ã  jour la configuration des alertes
        [HttpPut("alerts")]
        public async Task<IActionResult> UpdateAlertConfig([FromBody] AlertConfigDTO configDTO)
        {
            try
            {
                var success = await _configService.UpdateAlertConfig(configDTO);
                if (!success)
                {
                    return BadRequest(new ErrorResponseDTO { Message = "Mise Ã  jour de la configuration impossible." });
                }

                return Ok(new { Message = "Configuration des alertes mise Ã  jour avec succÃ¨s." });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new ErrorResponseDTO { Message = $"Erreur interne du serveur: {ex.Message}" });
            }
        }

        // ðŸ”¹ GET /api/admin/config/points â†’ RÃ©cupÃ©rer la configuration du systÃ¨me de points
        [HttpGet("points")]
        public async Task<IActionResult> GetPointsConfig()
        {
            try
            {
                var config = await _configService.GetPointsConfig();
                return Ok(config);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new ErrorResponseDTO { Message = $"Erreur interne du serveur: {ex.Message}" });
            }
        }

        // ðŸ”¹ PUT /api/admin/config/points â†’ Mettre Ã  jour la configuration du systÃ¨me de points
        [HttpPut("points")]
        public async Task<IActionResult> UpdatePointsConfig([FromBody] PointsSystemDTO configDTO)
        {
            try
            {
                var success = await _configService.UpdatePointsConfig(configDTO);
                if (!success)
                {
                    return BadRequest(new ErrorResponseDTO { Message = "Mise Ã  jour de la configuration impossible." });
                }

                return Ok(new { Message = "Configuration du systÃ¨me de points mise Ã  jour avec succÃ¨s." });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new ErrorResponseDTO { Message = $"Erreur interne du serveur: {ex.Message}" });
            }
        }

        // ðŸ”¹ POST /api/admin/config/database â†’ Configurer la connexion Ã  la base de donnÃ©es
        [HttpPost("database")]
        public async Task<IActionResult> ConfigureDatabase([FromBody] DatabaseConfigDTO configDTO)
        {
            try
            {
                var success = await _configService.UpdateDatabaseConfig(configDTO);
                if (!success)
                {
                    return BadRequest(new ErrorResponseDTO { Message = "Configuration de la base de donnÃ©es impossible." });
                }

                return Ok(new { Message = "Configuration de la base de donnÃ©es mise Ã  jour avec succÃ¨s." });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new ErrorResponseDTO { Message = $"Erreur interne du serveur: {ex.Message}" });
            }
        }

        // ðŸ”¹ POST /api/admin/config/check-alerts â†’ VÃ©rifier et gÃ©nÃ©rer les alertes pour les absences dÃ©passant le seuil
        [HttpPost("check-alerts")]
        public async Task<IActionResult> CheckAndGenerateAlerts()
        {
            try
            {
                var result = await _configService.CheckAndGenerateAbsenceAlerts();
                return Ok(new { 
                    Message = "VÃ©rification des alertes terminÃ©e.", 
                    AlertsGenerated = result.AlertsGenerated,
                    StudentsWithExcessiveAbsences = result.StudentsWithExcessiveAbsences
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new ErrorResponseDTO { Message = $"Erreur interne du serveur: {ex.Message}" });
            }
        }
    }
}

